
常用加密算法      名称

编码方案        Base64

哈希(散列)函数   MD5（消息摘要算法）
               SHA1
               SHA256
              


对称加密算法     DES
               AES
        流加密  对信息流中每一个元素加密，如12345678， 先对1加密，在对2加密
        块加密  先对信息分块。然后对块加密，如12345678，先1234成块，5678成块，然后对块加密。

非对称加密算法    RSA（公钥、私钥）

HTTPS    HTTP+SSL协议


前言：
        在写项目中，开发者不允许明文传输用户的隐私数据，同时也不允许用户的隐私数据以明文的方式做数据持久化。数据的
    安全性至关重要，而仅仅用POST请求提交用户的隐私数据，还是不能完全解决安全问题。所以我们经常会对用户敏感的数据做加密处理。

    1.数据安全介绍

    最基础的是我们发送网络请求时，使用get和post方式发送请求。两者具体区别就不做解释了，只是引出相关安全性问题

    get：将参数暴露在外，（绝对不安全-->明文请求或者傻瓜式请求）。
    post：将参数放到请求体body中，（相对于get比较安全-->但是我们可以很容易用一些软件截获请求数据。比如说Charles（青花瓷））
    Charles（大部分app的数据来源都使用该工具来抓包，并做网络测试）

    注意：Charles在使用中的乱码问题，可以显示包内容，然后打开info.plist文件，找到java目录下面的VMOptions，在后面添加一项：-Dfile.encoding=UTF-8

    2.数据安全的原则

        ·在网络上不允许传输用户隐私数据的明文,（即:App网络传输安全，指对数据从客户端传输到Server中间过程的加密，
    防止网络世界当中其他节点对数据的窃听）。
        ·数据存储安全：在本地不允许保存用户隐私数据的明文，主要指在磁盘做数据持久化的时候所做的加密。常见的如：记住密码
        App代码安全,（即:包括代码混淆，加密或者app加壳）。
        要想非常安全的传输数据，建议使用https。抓包不可以，但是中间人攻击则有可能。建议双向验证防止中间人攻击。

    常用加密方式

    编码方案：Base64
    哈希（散列）函数：MD5、SHA
    对称加密算法：DES、3DES、AES
    非对称加密算法：RSA
    HTTPS：HTTP+SSL协议
    场景：
    1.通过简单 BASE64编码 防止数据明文传输
    2.对普通请求、返回数据，生成hmacMD5校验（MD5中加入动态密钥），进行数据完整性（简单防篡改，安全性较低，优点：快速）校验
    3.对于重要数据，使用RSA进行数字签名，起到防篡改作。
    4.对于比较敏感的数据，如用户信息（登陆、注册等），客户端发送使用RSA加密，服务器返回使用DES(AES)加密
    5.也可以使用https传输请求，建议双向验证防止中间人攻击


    常用加密方式
        1. Base64  通过简单 BASE64编码 防止数据明文传输
           · Base64编码的特点：可以将任意的二进制数据进行Base64编码，得到并只用65个可见字符就能表示的文本文件。

        2. MD5消息摘要算法

            ·简单介绍:

                MD5：全称是Message Digest Algorithm 5，译为“消息摘要算法第5版”(经MD2、MD3和MD4发展而来)
                效果：对输入信息生成唯一的128位散列值（32个字符），即 32个16进制的数字。

            ·特点:
                输入两个不同的明文不会得到相同的输出值
                根据输出值，不能得到原始的明文，即其过程不可逆(只能加密, 不能解密)

            ·应用:
                现在的MD5已不再是绝对安全(如：暴力破解的网站)，对此，可以对MD5稍作改进，以增加解密的难度。
                解决：加盐（Salt）：在明文的固定位置插入随机串，然后再进行MD5（先加密，后乱序：先对明文进行MD5，然后对加密得到的MD5串的字符进行乱序）

            ·注意点:
                开发中，一定要和后台开发人员约定好，MD5加密的位数是16位还是32位(大多数都是32位的)，16位的可以通过32位的转换得到。
                MD5加密区分 大小写，使用时要和后台约定好。
                MD5公认被破解不代表其可逆，而是一段字符串加密后的密文，可以通过强大运算计算出字符串加密后的密文对应的原始字符串，但也不是绝对的被破解。
                PS.暴力破解是指通过将明文和生成的密文进行配对，生成强大的数据库，在数据库中搜索，在这里就可以破解密码。破解网址 http://www.cmd5.com

            ·提升MD5加密安全性，解决办法

                1.先明文加盐，然后再进行MD5。即明文后拼接字符串（此时拼接的字符串要 足够长+足够咸+足够复杂），再进行MD5加密。如：#define salt @"1342*&%&shlfhs390(*^^6R%@@KFGKF"
                2.先加密+乱序

                3.乱序|加盐，多次MD5加密等

                4.使用消息认证机制HMAC：给定一个"秘钥"，对明文进行加密，并且做"两次散列"！-> 得到的结果，还是 32 个字符，相对安全（KEY是服务器传给你的，不是你写死的）。
                    4.1 消息认证机制（HMAC）原理
                    消息的发送者和接收者有一个共享密钥，发送者使用共享密钥对消息加密计算得到MAC值（消息认证码）。
                    消息接收者使用共享密钥对消息加密计算得到MAC值，比较两个MAC值是否一致。
                    4.2 使用：客户端需要在发送的时候把（消息）+（消息·HMAC）一起发送给服务器；服务器接收到数据后，对拿到的消息用共享的KEY进行HMAC，比较是否一致，如果一致则信任。

3. 对称加密算法AES和DES
    (针对DES的第三方比如：SSkeychain)
    ·对称加密的特点
        加密/解密使用相同的密钥
        加密和解密的过程是可逆的
    ·经典算法
        DES EncryptionDemo标准
        AES 高级加密标准
    ·提示：
        加密过程是先加密，再base64编码
        解密过程是先base64解码，再解密


4. 非对称加密RSA

    ·非对称加密的特点
        使用 公钥 加密，使用 私钥 解密
        使用 私钥 加密，使用 公钥 解密（私钥签名，公钥验签）
        公钥是公开的，私钥保密
        加密处理安全，但是性能极差
    ·经典算法-->RSA






二、RSA加密、签名区别

　　加密和签名都是为了安全性考虑，但略有不同。常有人问加密和签名是用私钥还是公钥？其实都是对加密和签名的作用有所混淆。简单的说，加密是为了防止信息被泄露，而签名是为了防止信息被篡改。这里举2个例子说明。

第一个场景：战场上，B要给A传递一条消息，内容为某一指令。

RSA的加密过程如下：

（1）A生成一对密钥（公钥和私钥），私钥不公开，A自己保留。公钥为公开的，任何人可以获取。

（2）A传递自己的公钥给B，B用A的公钥对消息进行加密。

（3）A接收到B加密的消息，利用A自己的私钥对消息进行解密。

　　在这个过程中，只有2次传递过程，第一次是A传递公钥给B，第二次是B传递加密消息给A，即使都被敌方截获，也没有危险性，因为只有A的私钥才能对消息进行解密，防止了消息内容的泄露。



第二个场景：A收到B发的消息后，需要进行回复“收到”。

RSA签名的过程如下：

（1）A生成一对密钥（公钥和私钥），私钥不公开，A自己保留。公钥为公开的，任何人可以获取。

（2）A用自己的私钥对消息加签，形成签名，并将加签的消息和消息本身一起传递给B。

（3）B收到消息后，在获取A的公钥进行验签，如果验签出来的内容与消息本身一致，证明消息是A回复的。

　　在这个过程中，只有2次传递过程，第一次是A传递加签的消息和消息本身给B，第二次是B获取A的公钥，即使都被敌方截获，也没有危险性，因为只有A的私钥才能对消息进行签名，即使知道了消息内容，也无法伪造带签名的回复给B，防止了消息内容的篡改。



　　但是，综合两个场景你会发现，第一个场景虽然被截获的消息没有泄露，但是可以利用截获的公钥，将假指令进行加密，然后传递给A。第二个场景虽然截获的消息不能被篡改，但是消息的内容可以利用公钥验签来获得，并不能防止泄露。所以在实际应用中，要根据情况使用，也可以同时使用加密和签名，比如A和B都有一套自己的公钥和私钥，当A要给B发送消息时，先用B的公钥对消息加密，再对加密的消息使用A的私钥加签名，达到既不泄露也不被篡改，更能保证消息的安全性。

　　总结：公钥加密、私钥解密、私钥签名、公钥验签。


















